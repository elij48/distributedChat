import java.io.*;
import java.net.*;

public class NodeClient 
	{
	public static void main(String args[] ) throws IOException
		{
		
		// initialize variables
		String userInput;
		DataInputStream stdIn = new DataInputStream((System.in));
		String hostName = "192.168.1.5";
		int portNumber = 9000;
		double[] participants;
		int arrIndex;
		int participantIndex;
		int tempInt;
		
		// while loop reading input string 
		while ((userInput = stdIn.readLine()) != null)
			{
			// if it is a join request
			userInput = userInput.toLowerCase();
			if( userInput == "join" )
				{
				
				// set index to zero
				arrIndex = 0;
				participantIndex = 0;
				
				// connect to one other participant
				Socket chatSocket = new Socket(hostName, portNumber);
	            		ObjectOutputStream toServer = new ObjectOutputStream(chatSocket.getOutputStream());
	           	 	DataInputStream fromServer = new DataInputStream(chatSocket.getInputStream());
		
				// create a join message 
				Message_Join joinMessage = new Message_Join();
				
				// send a join message to one participant ( the port number is the unique id )
				toServer.writeObject(joinMessage);
				
				// receive the participants list from the other participant
				participants = fromServer.readObject;
				
				// add the participants received from the other participant to the global list
				while( participants[participantIndex] != 0 )
					{
					NodeMain.addParticipants( participants[participantIndex] , participants );
					}
				
				
				// close the connection
				chatSocket.close();
				toServer.close();
				fromServer.close();
				
				// loop though participants to send a new join message to the rest of them
				while( ( tempDouble = NodeMain.participantsList[arrIndex]) != 0 )
					{
					
					// connect to current participant
					Socket joinChatSocket = new Socket(hostName, (int) tempDouble);
		            		ObjectOutputStream nodeToServer = new ObjectOutputStream(chatSocket.getOutputStream());
					
					// create special case join message
		            
					
					// send the message to the server node
		            
					
					// close the connection
		            		joinChatSocket.close();
					nodeToServer.close();
					
					}
				
				}
		
			// if it is a leave request
			else if( userInput == "leave" )
				{
				
				// set index to zero
				arrIndex = 0;
		
				// while loop through the participants list
				while( arrIndex < participants.length )
					{
					
					// open a connection
					Socket chatSocket = new Socket(hostName, (int) participants[arrIndex]);
		            		ObjectOutputStream toServer = new ObjectOutputStream(chatSocket.getOutputStream());
			
					// send a leave message ( removing you from their list )
		            		Message_Leave leaveMessage = new Message_Leave();
		
					// close the connection
		            		chatSocket.close();
					toServer.close();
		
					// iterate to the next participant
					arrIndex ++;
					
					}
			
				}
		
			// if it is a regular message
			else
				{
				
				// set index to zero
				arrIndex = 0;
				
				// loop through the participants in the participants list
				while( arrIndex < participants.length )
					{
					
					// create a connection
					Socket chatSocket = new Socket(hostName, participants[arrIndex]);
		            		ObjectOutputStream toServer = new ObjectOutputStream(chatSocket.getOutputStream());
		            
		            		// initialize the message to be sent
		            		Message newMessage = new Message(userInput);
		
					// send the message to be displayed to their screen
		            		toServer.writeObject(newMessage);
		
					// close the connection
		            		chatSocket.close();
					toServer.close();
		
					// iterate to the next participant
					arrIndex ++;
					}
			
				}
			}
		}
	}
